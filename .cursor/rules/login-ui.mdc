---
description:
globs:
alwaysApply: false
---
# Login UI Pattern: Zustand Auth Store Integration

This rule describes how to build a login UI that integrates with the authentication store in [stores/authStore.ts](mdc:stores/authStore.ts) for Expo/React Native projects.

## Key Principles
- Use functional React components and TypeScript
- Leverage Zustand's `useAuthStore` for authentication state and actions
- Use Expo's `SafeAreaView` for layout
- Ensure accessibility with proper labels and roles
- Handle loading and error states from the store

## UI Structure
- Username/email and password input fields
- Login button (disabled when loading)
- Error message display
- Optionally, a loading indicator

## Example Usage
```tsx
import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useAuthStore } from '../stores/authStore';

export default function LoginScreen() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login, isLoading, error } = useAuthStore();

  async function handleLogin() {
    await login(email, password);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>Login</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        autoCapitalize="none"
        value={email}
        onChangeText={setEmail}
        accessible
        accessibilityLabel="Email"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
        accessible
        accessibilityLabel="Password"
      />
      {error && <Text style={styles.error}>{error}</Text>}
      <Button
        title={isLoading ? 'Logging in...' : 'Login'}
        onPress={handleLogin}
        disabled={isLoading}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: 'center', padding: 24, backgroundColor: '#fff' },
  title: { fontSize: 32, fontWeight: 'bold', marginBottom: 32, alignSelf: 'center' },
  input: { height: 48, borderColor: '#ccc', borderWidth: 1, borderRadius: 8, marginBottom: 16, paddingHorizontal: 12, fontSize: 16 },
  error: { color: '#d00', marginBottom: 16, textAlign: 'center' },
});
```

## Best Practices
- Use `isLoading` to disable the button and show progress
- Display `error` messages from the store
- Never store plain passwords in global state
- Use environment variables for API keys
- Follow Expo and accessibility guidelines

## References
- [authStore.ts](mdc:stores/authStore.ts)
